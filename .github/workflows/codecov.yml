name: Code Coverage

# Run this workflow after CI completes successfully
on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  codecov:
    name: Upload Coverage
    runs-on: ubuntu-latest
    
    # Only run if the triggering workflow succeeded or on direct push/PR
    if: |
      github.event_name != 'workflow_run' || 
      github.event.workflow_run.conclusion == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for accurate coverage reports
          fetch-depth: 0
          # For workflow_run events, checkout the head commit
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
      
      - name: Install web dependencies
        run: |
          cd web
          npm ci
      
      - name: Run web/frontend tests with coverage
        run: |
          cd web
          npm run test:coverage
        env:
          CI: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          # Look for coverage files in web directory
          directory: ./web
          # Common coverage file patterns
          files: |
            ./web/coverage/lcov.info,
            ./web/coverage/coverage-final.json,
            ./web/coverage/clover.xml
          # Fail CI if coverage upload fails
          fail_ci_if_error: true
          # Add flags to distinguish different test suites
          flags: frontend,web
          # Add custom name for this upload
          name: web-frontend-coverage
          # Enable verbose logging for debugging
          verbose: true
          # Use token for private repos (set in repository secrets)
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          # Additional environment variables
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Comment PR with coverage report
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          directory: ./web
          files: |
            ./web/coverage/lcov.info,
            ./web/coverage/coverage-final.json
          flags: frontend,web
          name: web-frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          # This enables PR comments
          comment: true
          # Customize the PR comment
          comment_on: pr
          # Don't fail if comment creation fails
          fail_ci_if_error: false
      
      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            web/coverage/
          retention-days: 30
      
      - name: Coverage Summary
        if: always()
        run: |
          echo "## Coverage Report Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f "web/coverage/lcov-report/index.html" ]; then
            echo "Coverage reports generated successfully." >> $GITHUB_STEP_SUMMARY
            echo "Check the Codecov dashboard for detailed coverage analysis." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Coverage reports not found. Check test configuration." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Setup Instructions for Maintainers" >> $GITHUB_STEP_SUMMARY
          echo "If this is the first time running codecov:" >> $GITHUB_STEP_SUMMARY
          echo "1. Visit https://codecov.io and sign in with GitHub" >> $GITHUB_STEP_SUMMARY
          echo "2. Add this repository to codecov" >> $GITHUB_STEP_SUMMARY
          echo "3. Get the repository token from codecov dashboard" >> $GITHUB_STEP_SUMMARY
          echo "4. Add it as CODECOV_TOKEN in repository secrets (Settings > Secrets and variables > Actions)" >> $GITHUB_STEP_SUMMARY
          echo "5. Ensure your package.json has a test:coverage script (e.g., 'jest --coverage' or 'vitest run --coverage')" >> $GITHUB_STEP_SUMMARY
          echo "6. Configure coverage output in jest.config.js or vitest.config.js to generate lcov reports" >> $GITHUB_STEP_SUMMARY
