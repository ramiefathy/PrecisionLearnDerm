# Cloud Build configuration for PrecisionLearnDerm
# This config builds and deploys both Firebase Functions and the static web app

steps:
  # Step 1: Install Firebase CLI
  - name: 'gcr.io/cloud-builders/npm'
    entrypoint: 'npm'
    args: ['install', '-g', 'firebase-tools']
    
  # Step 2: Install dependencies for Firebase Functions
  - name: 'gcr.io/cloud-builders/npm'
    entrypoint: 'npm'
    args: ['install']
    dir: 'functions'
    
  # Step 3: Install dependencies for web application
  - name: 'gcr.io/cloud-builders/npm'
    entrypoint: 'npm'
    args: ['install']
    dir: 'web'
    
  # Step 4: Build Firebase Functions
  # Compile TypeScript to JavaScript for the functions
  - name: 'gcr.io/cloud-builders/npm'
    entrypoint: 'npm'
    args: ['run', 'build']
    dir: 'functions'
    
  # Step 5: Build web application
  # Create production build of React app with Vite
  - name: 'gcr.io/cloud-builders/npm'
    entrypoint: 'npm'
    args: ['run', 'build']
    dir: 'web'
    
  # Step 6: Deploy Firebase Functions
  # Deploy the compiled functions to Firebase
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Authenticate with Firebase using service account
        firebase use default
        # Deploy only the functions
        firebase deploy --only functions --non-interactive
    env:
      - 'FIREBASE_TOKEN=${_FIREBASE_TOKEN}'
      
  # Step 7: Deploy static web application
  # Deploy the built React app to Firebase Hosting
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Deploy the static site to Firebase Hosting
        firebase deploy --only hosting --non-interactive
    env:
      - 'FIREBASE_TOKEN=${_FIREBASE_TOKEN}'
      
# Substitutions for build variables
# These can be set in Cloud Build trigger settings
substitutions:
  # Firebase token for authentication (set this in Cloud Build trigger)
  _FIREBASE_TOKEN: ''
  # Node.js version to use (matches functions requirement)
  _NODE_VERSION: '20'
  
# Build options
options:
  # Use higher CPU for faster builds
  machineType: 'E2_HIGHCPU_8'
  # Set Node.js version
  env:
    - 'NODE_VERSION=${_NODE_VERSION}'
  # Longer timeout for complex builds
  timeout: '1200s'
  
# Build artifacts and logs
artifacts:
  # Store build logs
  logs:
    - 'gs://${PROJECT_ID}_cloudbuild/logs'
    
# Build timeout (20 minutes)
timeout: '1200s'
